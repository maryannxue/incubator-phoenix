/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.phoenix.client;

import java.io.IOException;

import org.apache.hadoop.hbase.HConstants;
import org.apache.hadoop.hbase.KeyValue;
import org.apache.hadoop.hbase.client.Delete;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.io.ImmutableBytesWritable;
import org.apache.phoenix.util.MetaDataUtil;

/**
 * Build {@link KeyValue} in an efficient way
 */
public abstract class KeyValueBuilder {

    /**
     * Helper method for a {@link KeyValueBuilder} that catches an IOException from a {@link Put}
     * when adding a {@link KeyValue} generated by the KeyValueBuilder.
     * @throws RuntimeException if there is an IOException thrown from the underlying {@link Put}
     */
    @SuppressWarnings("javadoc")
    public static void addQuietly(Put put, KeyValueBuilder builder, KeyValue kv) {
        try {
            put.add(kv);
        } catch (IOException e) {
            throw new RuntimeException("KeyValue Builder " + builder + " created an invalid kv: "
                    + kv + "!");
        }
    }

    /**
     * Helper method for a {@link KeyValueBuilder} that catches an IOException from a {@link Put}
     * when adding a {@link KeyValue} generated by the KeyValueBuilder.
     * @throws RuntimeException if there is an IOException thrown from the underlying {@link Put}
     */
    @SuppressWarnings("javadoc")
    public static void deleteQuietly(Delete delete, KeyValueBuilder builder, KeyValue kv) {
        try {
            delete.addDeleteMarker(kv);
        } catch (IOException e) {
            throw new RuntimeException("KeyValue Builder " + builder + " created an invalid kv: "
                    + kv + "!");
        }
    }

    // FIXME: Temporarily disabling usage of this pending more testing
    private static final int CUSTOM_KEY_VALUE_MIN_VERSION = MetaDataUtil.encodeVersion("0.94.99");

    public static KeyValueBuilder get(String hbaseVersion) {
        int version = MetaDataUtil.encodeVersion(hbaseVersion);
        if (version >= CUSTOM_KEY_VALUE_MIN_VERSION) {
            return ClientKeyValueBuilder.INSTANCE;
        }
        return GenericKeyValueBuilder.INSTANCE;
    }

  public KeyValue buildPut(ImmutableBytesWritable row, ImmutableBytesWritable family,
      ImmutableBytesWritable qualifier, ImmutableBytesWritable value) {
    return buildPut(row, family, qualifier, HConstants.LATEST_TIMESTAMP, value);
  }

  public abstract KeyValue buildPut(ImmutableBytesWritable row, ImmutableBytesWritable family,
      ImmutableBytesWritable qualifier, long ts, ImmutableBytesWritable value);

  public KeyValue buildDeleteFamily(ImmutableBytesWritable row, ImmutableBytesWritable family,
            ImmutableBytesWritable qualifier) {
        return buildDeleteFamily(row, family, qualifier, HConstants.LATEST_TIMESTAMP);
  }

  public abstract KeyValue buildDeleteFamily(ImmutableBytesWritable row,
            ImmutableBytesWritable family, ImmutableBytesWritable qualifier, long ts);

  public KeyValue buildDeleteColumns(ImmutableBytesWritable row, ImmutableBytesWritable family,
            ImmutableBytesWritable qualifier) {
        return buildDeleteColumns(row, family, qualifier, HConstants.LATEST_TIMESTAMP);
  }

  public abstract KeyValue buildDeleteColumns(ImmutableBytesWritable row,
            ImmutableBytesWritable family, ImmutableBytesWritable qualifier, long ts);

  public KeyValue buildDeleteColumn(ImmutableBytesWritable row, ImmutableBytesWritable family,
            ImmutableBytesWritable qualifier) {
        return buildDeleteColumn(row, family, qualifier, HConstants.LATEST_TIMESTAMP);
  }

  public abstract KeyValue buildDeleteColumn(ImmutableBytesWritable row,
            ImmutableBytesWritable family, ImmutableBytesWritable qualifier, long ts);
}